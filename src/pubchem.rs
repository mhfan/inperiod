
use super::{ChemElem::{self, *}, ElectronCFG, Subshell, ecfg, ssc};
impl ChemElem { // Auto-generated by syncd.rs, DO NOT EDIT.
    pub const fn atomic_radius(&self) -> Option<f32> {
        Some(match *self {
            H  => 120.,
            He => 140.,
            Li => 182.,
            Be => 153.,
            B  => 192.,
            C  => 170.,
            N  => 155.,
            O  => 152.,
            F  => 135.,
            Ne => 154.,
            Na => 227.,
            Mg => 173.,
            Al => 184.,
            Si => 210.,
            P  => 180.,
            S  => 180.,
            Cl => 175.,
            Ar => 188.,
            K  => 275.,
            Ca => 231.,
            Sc => 211.,
            Ti => 187.,
            V  => 179.,
            Cr => 189.,
            Mn => 197.,
            Fe => 194.,
            Co => 192.,
            Ni => 163.,
            Cu => 140.,
            Zn => 139.,
            Ga => 187.,
            Ge => 211.,
            As => 185.,
            Se => 190.,
            Br => 183.,
            Kr => 202.,
            Rb => 303.,
            Sr => 249.,
            Y  => 219.,
            Zr => 186.,
            Nb => 207.,
            Mo => 209.,
            Tc => 209.,
            Ru => 207.,
            Rh => 195.,
            Pd => 202.,
            Ag => 172.,
            Cd => 158.,
            In => 193.,
            Sn => 217.,
            Sb => 206.,
            Te => 206.,
            I  => 198.,
            Xe => 216.,
            Cs => 343.,
            Ba => 268.,
            La => 240.,
            Ce => 235.,
            Pr => 239.,
            Nd => 229.,
            Pm => 236.,
            Sm => 229.,
            Eu => 233.,
            Gd => 237.,
            Tb => 221.,
            Dy => 229.,
            Ho => 216.,
            Er => 235.,
            Tm => 227.,
            Yb => 242.,
            Lu => 221.,
            Hf => 212.,
            Ta => 217.,
            W  => 210.,
            Re => 217.,
            Os => 216.,
            Ir => 202.,
            Pt => 209.,
            Au => 166.,
            Hg => 209.,
            Tl => 196.,
            Pb => 202.,
            Bi => 207.,
            Po => 197.,
            At => 202.,
            Rn => 220.,
            Fr => 348.,
            Ra => 283.,
            Ac => 260.,
            Th => 237.,
            Pa => 243.,
            U  => 240.,
            Np => 221.,
            Pu => 243.,
            Am => 244.,
            Cm => 245.,
            Bk => 244.,
            Cf => 245.,
            Es => 245.,
            _  => return None
        })
    }

    pub const fn electron_affinity(&self) -> Option<f32> {
        Some(match *self {
            H  => 0.754,
            Li => 0.618,
            B  => 0.277,
            C  => 1.263,
            O  => 1.461,
            F  => 3.339,
            Na => 0.548,
            Al => 0.441,
            Si => 1.385,
            P  => 0.746,
            S  => 2.077,
            Cl => 3.617,
            K  => 0.501,
            Sc => 0.188,
            Ti => 0.079,
            V  => 0.525,
            Cr => 0.666,
            Fe => 0.163,
            Co => 0.661,
            Ni => 1.156,
            Cu => 1.228,
            Ga => 0.3,
            Ge => 1.35,
            As => 0.81,
            Se => 2.021,
            Br => 3.365,
            Rb => 0.468,
            Y  => 0.307,
            Zr => 0.426,
            Nb => 0.893,
            Mo => 0.746,
            Tc => 0.55,
            Ru => 1.05,
            Rh => 1.137,
            Pd => 0.557,
            Ag => 1.302,
            In => 0.3,
            Sn => 1.2,
            Sb => 1.07,
            Te => 1.971,
            I  => 3.059,
            Cs => 0.472,
            La => 0.5,
            Ce => 0.5,
            Ta => 0.322,
            W  => 0.815,
            Re => 0.15,
            Os => 1.1,
            Ir => 1.565,
            Pt => 2.128,
            Au => 2.309,
            Tl => 0.2,
            Pb => 0.36,
            Bi => 0.946,
            Po => 1.9,
            At => 2.8,
            Fr => 0.47,
            _  => return None
        })
    }

    pub const fn electronegativity(&self) -> Option<f32> {
        Some(match *self {
            H  => 2.2,
            Li => 0.98,
            Be => 1.57,
            B  => 2.04,
            C  => 2.55,
            N  => 3.04,
            O  => 3.44,
            F  => 3.98,
            Na => 0.93,
            Mg => 1.31,
            Al => 1.61,
            Si => 1.9,
            P  => 2.19,
            S  => 2.58,
            Cl => 3.16,
            K  => 0.82,
            Ca => 1.,
            Sc => 1.36,
            Ti => 1.54,
            V  => 1.63,
            Cr => 1.66,
            Mn => 1.55,
            Fe => 1.83,
            Co => 1.88,
            Ni => 1.91,
            Cu => 1.9,
            Zn => 1.65,
            Ga => 1.81,
            Ge => 2.01,
            As => 2.18,
            Se => 2.55,
            Br => 2.96,
            Kr => 3.,
            Rb => 0.82,
            Sr => 0.95,
            Y  => 1.22,
            Zr => 1.33,
            Nb => 1.6,
            Mo => 2.16,
            Tc => 1.9,
            Ru => 2.2,
            Rh => 2.28,
            Pd => 2.2,
            Ag => 1.93,
            Cd => 1.69,
            In => 1.78,
            Sn => 1.96,
            Sb => 2.05,
            Te => 2.1,
            I  => 2.66,
            Xe => 2.6,
            Cs => 0.79,
            Ba => 0.89,
            La => 1.1,
            Ce => 1.12,
            Pr => 1.13,
            Nd => 1.14,
            Sm => 1.17,
            Gd => 1.2,
            Dy => 1.22,
            Ho => 1.23,
            Er => 1.24,
            Tm => 1.25,
            Lu => 1.27,
            Hf => 1.3,
            Ta => 1.5,
            W  => 2.36,
            Re => 1.9,
            Os => 2.2,
            Ir => 2.2,
            Pt => 2.28,
            Au => 2.54,
            Hg => 2.,
            Tl => 1.62,
            Pb => 2.33,
            Bi => 2.02,
            Po => 2.,
            At => 2.2,
            Fr => 0.7,
            Ra => 0.9,
            Ac => 1.1,
            Th => 1.3,
            Pa => 1.5,
            U  => 1.38,
            Np => 1.36,
            Pu => 1.28,
            Am => 1.3,
            Cm => 1.3,
            Bk => 1.3,
            Cf => 1.3,
            Es => 1.3,
            Fm => 1.3,
            Md => 1.3,
            No => 1.3,
            Lr => 1.3,
            _  => return None
        })
    }

    pub const fn melting_point(&self) -> Option<f32> {
        Some(match *self {
            H  => 13.81,
            He => 0.95,
            Li => 453.65,
            Be => 1560.,
            B  => 2348.,
            C  => 3823.,
            N  => 63.15,
            O  => 54.36,
            F  => 53.53,
            Ne => 24.56,
            Na => 370.95,
            Mg => 923.,
            Al => 933.437,
            Si => 1687.,
            P  => 317.3,
            S  => 388.36,
            Cl => 171.65,
            Ar => 83.8,
            K  => 336.53,
            Ca => 1115.,
            Sc => 1814.,
            Ti => 1941.,
            V  => 2183.,
            Cr => 2180.,
            Mn => 1519.,
            Fe => 1811.,
            Co => 1768.,
            Ni => 1728.,
            Cu => 1357.77,
            Zn => 692.68,
            Ga => 302.91,
            Ge => 1211.4,
            As => 1090.,
            Se => 493.65,
            Br => 265.95,
            Kr => 115.79,
            Rb => 312.46,
            Sr => 1050.,
            Y  => 1795.,
            Zr => 2128.,
            Nb => 2750.,
            Mo => 2896.,
            Tc => 2430.,
            Ru => 2607.,
            Rh => 2237.,
            Pd => 1828.05,
            Ag => 1234.93,
            Cd => 594.22,
            In => 429.75,
            Sn => 505.08,
            Sb => 903.78,
            Te => 722.66,
            I  => 386.85,
            Xe => 161.36,
            Cs => 301.59,
            Ba => 1000.,
            La => 1191.,
            Ce => 1071.,
            Pr => 1204.,
            Nd => 1294.,
            Pm => 1315.,
            Sm => 1347.,
            Eu => 1095.,
            Gd => 1586.,
            Tb => 1629.,
            Dy => 1685.,
            Ho => 1747.,
            Er => 1802.,
            Tm => 1818.,
            Yb => 1092.,
            Lu => 1936.,
            Hf => 2506.,
            Ta => 3290.,
            W  => 3695.,
            Re => 3459.,
            Os => 3306.,
            Ir => 2719.,
            Pt => 2041.55,
            Au => 1337.33,
            Hg => 234.32,
            Tl => 577.,
            Pb => 600.61,
            Bi => 544.55,
            Po => 527.,
            At => 575.,
            Rn => 202.,
            Fr => 300.,
            Ra => 973.,
            Ac => 1324.,
            Th => 2023.,
            Pa => 1845.,
            U  => 1408.,
            Np => 917.,
            Pu => 913.,
            Am => 1449.,
            Cm => 1618.,
            Bk => 1323.,
            Cf => 1173.,
            Es => 1133.,
            Fm => 1800.,
            Md => 1100.,
            No => 1100.,
            Lr => 1900.,
            _  => return None
        })
    }

    pub const fn boiling_point(&self) -> Option<f32> {
        Some(match *self {
            H  => 20.28,
            He => 4.22,
            Li => 1615.,
            Be => 2744.,
            B  => 4273.,
            C  => 4098.,
            N  => 77.36,
            O  => 90.2,
            F  => 85.03,
            Ne => 27.07,
            Na => 1156.,
            Mg => 1363.,
            Al => 2792.,
            Si => 3538.,
            P  => 553.65,
            S  => 717.75,
            Cl => 239.11,
            Ar => 87.3,
            K  => 1032.,
            Ca => 1757.,
            Sc => 3109.,
            Ti => 3560.,
            V  => 3680.,
            Cr => 2944.,
            Mn => 2334.,
            Fe => 3134.,
            Co => 3200.,
            Ni => 3186.,
            Cu => 2835.,
            Zn => 1180.,
            Ga => 2477.,
            Ge => 3106.,
            As => 887.,
            Se => 958.,
            Br => 331.95,
            Kr => 119.93,
            Rb => 961.,
            Sr => 1655.,
            Y  => 3618.,
            Zr => 4682.,
            Nb => 5017.,
            Mo => 4912.,
            Tc => 4538.,
            Ru => 4423.,
            Rh => 3968.,
            Pd => 3236.,
            Ag => 2435.,
            Cd => 1040.,
            In => 2345.,
            Sn => 2875.,
            Sb => 1860.,
            Te => 1261.,
            I  => 457.55,
            Xe => 165.03,
            Cs => 944.,
            Ba => 2170.,
            La => 3737.,
            Ce => 3697.,
            Pr => 3793.,
            Nd => 3347.,
            Pm => 3273.,
            Sm => 2067.,
            Eu => 1802.,
            Gd => 3546.,
            Tb => 3503.,
            Dy => 2840.,
            Ho => 2973.,
            Er => 3141.,
            Tm => 2223.,
            Yb => 1469.,
            Lu => 3675.,
            Hf => 4876.,
            Ta => 5731.,
            W  => 5828.,
            Re => 5869.,
            Os => 5285.,
            Ir => 4701.,
            Pt => 4098.,
            Au => 3129.,
            Hg => 629.88,
            Tl => 1746.,
            Pb => 2022.,
            Bi => 1837.,
            Po => 1235.,
            Rn => 211.45,
            Ra => 1413.,
            Ac => 3471.,
            Th => 5061.,
            U  => 4404.,
            Np => 4175.,
            Pu => 3501.,
            Am => 2284.,
            Cm => 3400.,
            _  => return None
        })
    }

    pub const fn density(&self) -> Option<f32> {
        Some(match *self {
            H  => 0.00008988,
            He => 0.0001785,
            Li => 0.534,
            Be => 1.85,
            B  => 2.37,
            C  => 2.2670,
            N  => 0.0012506,
            O  => 0.001429,
            F  => 0.001696,
            Ne => 0.0008999,
            Na => 0.97,
            Mg => 1.74,
            Al => 2.70,
            Si => 2.3296,
            P  => 1.82,
            S  => 2.067,
            Cl => 0.003214,
            Ar => 0.0017837,
            K  => 0.89,
            Ca => 1.54,
            Sc => 2.99,
            Ti => 4.5,
            V  => 6.0,
            Cr => 7.15,
            Mn => 7.3,
            Fe => 7.874,
            Co => 8.86,
            Ni => 8.912,
            Cu => 8.933,
            Zn => 7.134,
            Ga => 5.91,
            Ge => 5.323,
            As => 5.776,
            Se => 4.809,
            Br => 3.11,
            Kr => 0.003733,
            Rb => 1.53,
            Sr => 2.64,
            Y  => 4.47,
            Zr => 6.52,
            Nb => 8.57,
            Mo => 10.2,
            Tc => 11.,
            Ru => 12.1,
            Rh => 12.4,
            Pd => 12.0,
            Ag => 10.501,
            Cd => 8.69,
            In => 7.31,
            Sn => 7.287,
            Sb => 6.685,
            Te => 6.232,
            I  => 4.93,
            Xe => 0.005887,
            Cs => 1.93,
            Ba => 3.62,
            La => 6.15,
            Ce => 6.770,
            Pr => 6.77,
            Nd => 7.01,
            Pm => 7.26,
            Sm => 7.52,
            Eu => 5.24,
            Gd => 7.90,
            Tb => 8.23,
            Dy => 8.55,
            Ho => 8.80,
            Er => 9.07,
            Tm => 9.32,
            Yb => 6.90,
            Lu => 9.84,
            Hf => 13.3,
            Ta => 16.4,
            W  => 19.3,
            Re => 20.8,
            Os => 22.57,
            Ir => 22.42,
            Pt => 21.46,
            Au => 19.282,
            Hg => 13.5336,
            Tl => 11.8,
            Pb => 11.342,
            Bi => 9.807,
            Po => 9.32,
            At => 7.,
            Rn => 0.00973,
            Ra => 5.,
            Ac => 10.07,
            Th => 11.72,
            Pa => 15.37,
            U  => 18.95,
            Np => 20.25,
            Pu => 19.84,
            Am => 13.69,
            Cm => 13.51,
            Bk => 14.,
            _  => return None
        })
    }

    pub const fn electron_configuration(&self) -> &ElectronCFG {
        &Self::ECFG[self.atomic_number() as usize]
    }

const ECFG: [ElectronCFG; ChemElem::MAX as usize] = [ ecfg!(),
    ecfg![ssc!(1, b's',  1)],
    ecfg![ssc!(1, b's',  2)],
    ecfg![He, ssc!(2, b's',  1)],
    ecfg![He, ssc!(2, b's',  2)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  1)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  2)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  3)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  4)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  5)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  6)],
    ecfg![Ne, ssc!(3, b's',  1)],
    ecfg![Ne, ssc!(3, b's',  2)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  1)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  2)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  3)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  4)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  5)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  6)],
    ecfg![Ar, ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  1), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  2), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  3), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  5), ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(3, b'd',  5), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  6), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  7), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  8), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  1)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  3)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  4)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  5)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  6)],
    ecfg![Kr, ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  1), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  2), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  4), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  5), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  5), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  7), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  8), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd', 10)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  1)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  2)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  3)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  4)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  5)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  6)],
    ecfg![Xe, ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  1), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  3), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  4), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  5), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  6), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  7), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  7), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  9), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 10), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 11), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 12), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 13), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  2), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  3), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  4), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  5), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  6), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  7), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  9), ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  3)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  4)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  5)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  6)],
    ecfg![Rn, ssc!(7, b's',  1)],
    ecfg![Rn, ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(6, b'd',  2), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  2), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  3), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  4), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  6), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  7), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  7), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  9), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 10), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 11), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 12), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 13), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  2), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  3), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  4), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  5), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  6), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  7), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  8), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  9), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  1)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  3)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  4)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  5)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  6)],
];

}

