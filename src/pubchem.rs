
// Auto-generated by syncd.rs, DO NOT EDIT.

use super::{ChemElem, ElectronCFG, Subshell, ecfg, ssc};

impl ChemElem {
    pub const fn atomic_radius(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 120.,
              2 => 140.,
              3 => 182.,
              4 => 153.,
              5 => 192.,
              6 => 170.,
              7 => 155.,
              8 => 152.,
              9 => 135.,
             10 => 154.,
             11 => 227.,
             12 => 173.,
             13 => 184.,
             14 => 210.,
             15 => 180.,
             16 => 180.,
             17 => 175.,
             18 => 188.,
             19 => 275.,
             20 => 231.,
             21 => 211.,
             22 => 187.,
             23 => 179.,
             24 => 189.,
             25 => 197.,
             26 => 194.,
             27 => 192.,
             28 => 163.,
             29 => 140.,
             30 => 139.,
             31 => 187.,
             32 => 211.,
             33 => 185.,
             34 => 190.,
             35 => 183.,
             36 => 202.,
             37 => 303.,
             38 => 249.,
             39 => 219.,
             40 => 186.,
             41 => 207.,
             42 => 209.,
             43 => 209.,
             44 => 207.,
             45 => 195.,
             46 => 202.,
             47 => 172.,
             48 => 158.,
             49 => 193.,
             50 => 217.,
             51 => 206.,
             52 => 206.,
             53 => 198.,
             54 => 216.,
             55 => 343.,
             56 => 268.,
             57 => 240.,
             58 => 235.,
             59 => 239.,
             60 => 229.,
             61 => 236.,
             62 => 229.,
             63 => 233.,
             64 => 237.,
             65 => 221.,
             66 => 229.,
             67 => 216.,
             68 => 235.,
             69 => 227.,
             70 => 242.,
             71 => 221.,
             72 => 212.,
             73 => 217.,
             74 => 210.,
             75 => 217.,
             76 => 216.,
             77 => 202.,
             78 => 209.,
             79 => 166.,
             80 => 209.,
             81 => 196.,
             82 => 202.,
             83 => 207.,
             84 => 197.,
             85 => 202.,
             86 => 220.,
             87 => 348.,
             88 => 283.,
             89 => 260.,
             90 => 237.,
             91 => 243.,
             92 => 240.,
             93 => 221.,
             94 => 243.,
             95 => 244.,
             96 => 245.,
             97 => 244.,
             98 => 245.,
             99 => 245.,
            _   => return None
        })
    }

    pub const fn electron_affinity(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 0.754,
              3 => 0.618,
              5 => 0.277,
              6 => 1.263,
              8 => 1.461,
              9 => 3.339,
             11 => 0.548,
             13 => 0.441,
             14 => 1.385,
             15 => 0.746,
             16 => 2.077,
             17 => 3.617,
             19 => 0.501,
             21 => 0.188,
             22 => 0.079,
             23 => 0.525,
             24 => 0.666,
             26 => 0.163,
             27 => 0.661,
             28 => 1.156,
             29 => 1.228,
             31 => 0.3,
             32 => 1.35,
             33 => 0.81,
             34 => 2.021,
             35 => 3.365,
             37 => 0.468,
             39 => 0.307,
             40 => 0.426,
             41 => 0.893,
             42 => 0.746,
             43 => 0.55,
             44 => 1.05,
             45 => 1.137,
             46 => 0.557,
             47 => 1.302,
             49 => 0.3,
             50 => 1.2,
             51 => 1.07,
             52 => 1.971,
             53 => 3.059,
             55 => 0.472,
             57 => 0.5,
             58 => 0.5,
             73 => 0.322,
             74 => 0.815,
             75 => 0.15,
             76 => 1.1,
             77 => 1.565,
             78 => 2.128,
             79 => 2.309,
             81 => 0.2,
             82 => 0.36,
             83 => 0.946,
             84 => 1.9,
             85 => 2.8,
             87 => 0.47,
            _   => return None
        })
    }

    pub const fn electronegativity(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 2.2,
              3 => 0.98,
              4 => 1.57,
              5 => 2.04,
              6 => 2.55,
              7 => 3.04,
              8 => 3.44,
              9 => 3.98,
             11 => 0.93,
             12 => 1.31,
             13 => 1.61,
             14 => 1.9,
             15 => 2.19,
             16 => 2.58,
             17 => 3.16,
             19 => 0.82,
             20 => 1.,
             21 => 1.36,
             22 => 1.54,
             23 => 1.63,
             24 => 1.66,
             25 => 1.55,
             26 => 1.83,
             27 => 1.88,
             28 => 1.91,
             29 => 1.9,
             30 => 1.65,
             31 => 1.81,
             32 => 2.01,
             33 => 2.18,
             34 => 2.55,
             35 => 2.96,
             36 => 3.,
             37 => 0.82,
             38 => 0.95,
             39 => 1.22,
             40 => 1.33,
             41 => 1.6,
             42 => 2.16,
             43 => 1.9,
             44 => 2.2,
             45 => 2.28,
             46 => 2.2,
             47 => 1.93,
             48 => 1.69,
             49 => 1.78,
             50 => 1.96,
             51 => 2.05,
             52 => 2.1,
             53 => 2.66,
             54 => 2.6,
             55 => 0.79,
             56 => 0.89,
             57 => 1.1,
             58 => 1.12,
             59 => 1.13,
             60 => 1.14,
             62 => 1.17,
             64 => 1.2,
             66 => 1.22,
             67 => 1.23,
             68 => 1.24,
             69 => 1.25,
             71 => 1.27,
             72 => 1.3,
             73 => 1.5,
             74 => 2.36,
             75 => 1.9,
             76 => 2.2,
             77 => 2.2,
             78 => 2.28,
             79 => 2.54,
             80 => 2.,
             81 => 1.62,
             82 => 2.33,
             83 => 2.02,
             84 => 2.,
             85 => 2.2,
             87 => 0.7,
             88 => 0.9,
             89 => 1.1,
             90 => 1.3,
             91 => 1.5,
             92 => 1.38,
             93 => 1.36,
             94 => 1.28,
             95 => 1.3,
             96 => 1.3,
             97 => 1.3,
             98 => 1.3,
             99 => 1.3,
            100 => 1.3,
            101 => 1.3,
            102 => 1.3,
            103 => 1.3,
            _   => return None
        })
    }

    pub const fn melting_point(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 13.81,
              2 => 0.95,
              3 => 453.65,
              4 => 1560.,
              5 => 2348.,
              6 => 3823.,
              7 => 63.15,
              8 => 54.36,
              9 => 53.53,
             10 => 24.56,
             11 => 370.95,
             12 => 923.,
             13 => 933.437,
             14 => 1687.,
             15 => 317.3,
             16 => 388.36,
             17 => 171.65,
             18 => 83.8,
             19 => 336.53,
             20 => 1115.,
             21 => 1814.,
             22 => 1941.,
             23 => 2183.,
             24 => 2180.,
             25 => 1519.,
             26 => 1811.,
             27 => 1768.,
             28 => 1728.,
             29 => 1357.77,
             30 => 692.68,
             31 => 302.91,
             32 => 1211.4,
             33 => 1090.,
             34 => 493.65,
             35 => 265.95,
             36 => 115.79,
             37 => 312.46,
             38 => 1050.,
             39 => 1795.,
             40 => 2128.,
             41 => 2750.,
             42 => 2896.,
             43 => 2430.,
             44 => 2607.,
             45 => 2237.,
             46 => 1828.05,
             47 => 1234.93,
             48 => 594.22,
             49 => 429.75,
             50 => 505.08,
             51 => 903.78,
             52 => 722.66,
             53 => 386.85,
             54 => 161.36,
             55 => 301.59,
             56 => 1000.,
             57 => 1191.,
             58 => 1071.,
             59 => 1204.,
             60 => 1294.,
             61 => 1315.,
             62 => 1347.,
             63 => 1095.,
             64 => 1586.,
             65 => 1629.,
             66 => 1685.,
             67 => 1747.,
             68 => 1802.,
             69 => 1818.,
             70 => 1092.,
             71 => 1936.,
             72 => 2506.,
             73 => 3290.,
             74 => 3695.,
             75 => 3459.,
             76 => 3306.,
             77 => 2719.,
             78 => 2041.55,
             79 => 1337.33,
             80 => 234.32,
             81 => 577.,
             82 => 600.61,
             83 => 544.55,
             84 => 527.,
             85 => 575.,
             86 => 202.,
             87 => 300.,
             88 => 973.,
             89 => 1324.,
             90 => 2023.,
             91 => 1845.,
             92 => 1408.,
             93 => 917.,
             94 => 913.,
             95 => 1449.,
             96 => 1618.,
             97 => 1323.,
             98 => 1173.,
             99 => 1133.,
            100 => 1800.,
            101 => 1100.,
            102 => 1100.,
            103 => 1900.,
            _   => return None
        })
    }

    pub const fn boiling_point(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 20.28,
              2 => 4.22,
              3 => 1615.,
              4 => 2744.,
              5 => 4273.,
              6 => 4098.,
              7 => 77.36,
              8 => 90.2,
              9 => 85.03,
             10 => 27.07,
             11 => 1156.,
             12 => 1363.,
             13 => 2792.,
             14 => 3538.,
             15 => 553.65,
             16 => 717.75,
             17 => 239.11,
             18 => 87.3,
             19 => 1032.,
             20 => 1757.,
             21 => 3109.,
             22 => 3560.,
             23 => 3680.,
             24 => 2944.,
             25 => 2334.,
             26 => 3134.,
             27 => 3200.,
             28 => 3186.,
             29 => 2835.,
             30 => 1180.,
             31 => 2477.,
             32 => 3106.,
             33 => 887.,
             34 => 958.,
             35 => 331.95,
             36 => 119.93,
             37 => 961.,
             38 => 1655.,
             39 => 3618.,
             40 => 4682.,
             41 => 5017.,
             42 => 4912.,
             43 => 4538.,
             44 => 4423.,
             45 => 3968.,
             46 => 3236.,
             47 => 2435.,
             48 => 1040.,
             49 => 2345.,
             50 => 2875.,
             51 => 1860.,
             52 => 1261.,
             53 => 457.55,
             54 => 165.03,
             55 => 944.,
             56 => 2170.,
             57 => 3737.,
             58 => 3697.,
             59 => 3793.,
             60 => 3347.,
             61 => 3273.,
             62 => 2067.,
             63 => 1802.,
             64 => 3546.,
             65 => 3503.,
             66 => 2840.,
             67 => 2973.,
             68 => 3141.,
             69 => 2223.,
             70 => 1469.,
             71 => 3675.,
             72 => 4876.,
             73 => 5731.,
             74 => 5828.,
             75 => 5869.,
             76 => 5285.,
             77 => 4701.,
             78 => 4098.,
             79 => 3129.,
             80 => 629.88,
             81 => 1746.,
             82 => 2022.,
             83 => 1837.,
             84 => 1235.,
             86 => 211.45,
             88 => 1413.,
             89 => 3471.,
             90 => 5061.,
             92 => 4404.,
             93 => 4175.,
             94 => 3501.,
             95 => 2284.,
             96 => 3400.,
            _   => return None
        })
    }

    pub const fn density(&self) -> Option<f32> {
        Some(match self.atomic_number() {
              1 => 0.00008988,
              2 => 0.0001785,
              3 => 0.534,
              4 => 1.85,
              5 => 2.37,
              6 => 2.2670,
              7 => 0.0012506,
              8 => 0.001429,
              9 => 0.001696,
             10 => 0.0008999,
             11 => 0.97,
             12 => 1.74,
             13 => 2.70,
             14 => 2.3296,
             15 => 1.82,
             16 => 2.067,
             17 => 0.003214,
             18 => 0.0017837,
             19 => 0.89,
             20 => 1.54,
             21 => 2.99,
             22 => 4.5,
             23 => 6.0,
             24 => 7.15,
             25 => 7.3,
             26 => 7.874,
             27 => 8.86,
             28 => 8.912,
             29 => 8.933,
             30 => 7.134,
             31 => 5.91,
             32 => 5.323,
             33 => 5.776,
             34 => 4.809,
             35 => 3.11,
             36 => 0.003733,
             37 => 1.53,
             38 => 2.64,
             39 => 4.47,
             40 => 6.52,
             41 => 8.57,
             42 => 10.2,
             43 => 11.,
             44 => 12.1,
             45 => 12.4,
             46 => 12.0,
             47 => 10.501,
             48 => 8.69,
             49 => 7.31,
             50 => 7.287,
             51 => 6.685,
             52 => 6.232,
             53 => 4.93,
             54 => 0.005887,
             55 => 1.93,
             56 => 3.62,
             57 => 6.15,
             58 => 6.770,
             59 => 6.77,
             60 => 7.01,
             61 => 7.26,
             62 => 7.52,
             63 => 5.24,
             64 => 7.90,
             65 => 8.23,
             66 => 8.55,
             67 => 8.80,
             68 => 9.07,
             69 => 9.32,
             70 => 6.90,
             71 => 9.84,
             72 => 13.3,
             73 => 16.4,
             74 => 19.3,
             75 => 20.8,
             76 => 22.57,
             77 => 22.42,
             78 => 21.46,
             79 => 19.282,
             80 => 13.5336,
             81 => 11.8,
             82 => 11.342,
             83 => 9.807,
             84 => 9.32,
             85 => 7.,
             86 => 0.00973,
             88 => 5.,
             89 => 10.07,
             90 => 11.72,
             91 => 15.37,
             92 => 18.95,
             93 => 20.25,
             94 => 19.84,
             95 => 13.69,
             96 => 13.51,
             97 => 14.,
            _   => return None
        })
    }

    pub const fn electron_configuration(&self) -> &ElectronCFG { &Self::ECFG[*self as usize] }

const ECFG: [ElectronCFG; ChemElem::MAX as usize] = [ ecfg!(),
    ecfg![ssc!(1, b's',  1)],
    ecfg![ssc!(1, b's',  2)],
    ecfg![He, ssc!(2, b's',  1)],
    ecfg![He, ssc!(2, b's',  2)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  1)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  2)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  3)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  4)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  5)],
    ecfg![He, ssc!(2, b's',  2), ssc!(2, b'p',  6)],
    ecfg![Ne, ssc!(3, b's',  1)],
    ecfg![Ne, ssc!(3, b's',  2)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  1)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  2)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  3)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  4)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  5)],
    ecfg![Ne, ssc!(3, b's',  2), ssc!(3, b'p',  6)],
    ecfg![Ar, ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  1), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  2), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  3), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  5), ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(3, b'd',  5), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  6), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  7), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd',  8), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  1)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  1)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  2)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  3)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  4)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  5)],
    ecfg![Ar, ssc!(3, b'd', 10), ssc!(4, b's',  2), ssc!(4, b'p',  6)],
    ecfg![Kr, ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  1), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  2), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  4), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  5), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  5), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd',  7), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd',  8), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd', 10)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  1)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  1)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  2)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  3)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  4)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  5)],
    ecfg![Kr, ssc!(4, b'd', 10), ssc!(5, b's',  2), ssc!(5, b'p',  6)],
    ecfg![Xe, ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  1), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  3), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  4), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  5), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  6), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  7), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  7), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f',  9), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 10), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 11), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 12), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 13), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  1), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  2), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  3), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  4), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  5), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  6), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  7), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd',  9), ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  1)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  2)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  3)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  4)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  5)],
    ecfg![Xe, ssc!(4, b'f', 14), ssc!(5, b'd', 10), ssc!(6, b's',  2), ssc!(6, b'p',  6)],
    ecfg![Rn, ssc!(7, b's',  1)],
    ecfg![Rn, ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(6, b'd',  2), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  2), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  3), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  4), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  6), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  7), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  7), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f',  9), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 10), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 11), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 12), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 13), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  1), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  2), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  3), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  4), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  5), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  6), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  7), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  8), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd',  9), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  1)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  2)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  3)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  4)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  5)],
    ecfg![Rn, ssc!(5, b'f', 14), ssc!(6, b'd', 10), ssc!(7, b's',  2), ssc!(7, b'p',  6)],
];

}

